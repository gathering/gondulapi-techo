/*
Tech:Online backend
Copyright 2020, Kristian Lyngst√∏l <kly@kly.no>

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

package techo

import (
	"time"

	"github.com/gathering/gondulapi"
	"github.com/gathering/gondulapi/db"
	"github.com/gathering/gondulapi/receiver"
)

// TimeSlot represents a slot a user has allocated.
type TimeSlot struct {
	UserID    string     `column:"user_id" json="user_id"`
	StartTime *time.Time `column:"start_time" json="start_time"`
	EndTime   *time.Time `column:"end_time" json="end_time"`
	StationID int        `column:"station_id" json="station_id"`
}

func init() {
	receiver.AddHandler("/timeslot/", func() interface{} { return &TimeSlot{} })
}

// Get gets a time slot.
func (ts *TimeSlot) Get(request *gondulapi.Request) error {
	if request.Element == "" {
		return gondulapi.Error{Code: 400, Message: "GET requires an element"}
	}
	rows, err := db.DB.Query("SELECT user_id,start_time,end_time,station_id FROM timeslots WHERE participant = $1", request.Element)
	if err != nil {
		return gondulapi.Error{Code: 500, Message: "ops"}
	}
	defer func() {
		rows.Close()
	}()
	ok := rows.Next()
	if !ok {
		return gondulapi.Error{Code: 404, Message: "No timeslot assigned"}
	}
	err = rows.Scan(&ts.UserID, &ts.StartTime, &ts.EndTime, &ts.StationID)
	if err != nil {
		return gondulapi.Error{Code: 500, Message: "Bad things"}
	}
	return nil
}
